{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo ao Guia de Desenvolvimento Cognitivo.ai","text":"<p>Este \u00e9 o guia de desenvolvimento da Cognitivo.ai, que tem como objetivo padronizar o desenvolvimento de projetos e auxiliar no desenvolvimento de solu\u00e7\u00f5es de forma mais eficiente e organizada.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<ul> <li> <p>Fornecer um guia de desenvolvimento para os projetos da Cognitivo.ai</p> </li> <li> <p>Auxiliar no desenvolvimento das solu\u00e7\u00f5es propostas e padroniza\u00e7\u00e3o das mesmas</p> </li> <li> <p>Gerenciar a organiza\u00e7\u00e3o e padroniza\u00e7\u00e3o do c\u00f3digo e documenta\u00e7\u00f5es dos projetos</p> </li> <li> <p>Facilitar a integra\u00e7\u00e3o entre os times de desenvolvimento</p> </li> </ul>"},{"location":"#filosofia-de-desenvolvimento","title":"Filosofia de Desenvolvimento \ud83d\udcad","text":"<p>Quando come\u00e7amos um projeto, o nosso primeiro instinto \u00e9 pegar logo a ideia e come\u00e7ar a codificar sem ao menos pararmos para pensar no que estamos fazendo, olhamos somente para onde queremos chegar e n\u00e3o no como queremos chegar l\u00e1. Isso \u00e9 um instinto natural que muitas vezes temos n\u00e3o s\u00f3 nos projetos, mas na nossa vida como um todo, e, na maioria das vezes, n\u00e3o pensamos em um ponto crucial, que fazer algo sem estruturar uma jornada, pode gerar enormes agravantes l\u00e1 na frente, afinal, nenhum pedreiro ou engenheiro civil sai construindo uma casa sem antes fazer uma boa base para suport\u00e1-la.</p> <p>Pensando nisso, antes de entrar em defini\u00e7\u00f5es de reposit\u00f3rios, padr\u00f5es de c\u00f3digo e muitos outros pontos que nos ajudaram a padronizar nossas solu\u00e7\u00f5es, vamos falar um pouco sobre mentalidade de codar de uma forma estruturada e n\u00e3o deixar que nenhuma ponta solta afete nosso desenvolvimento, para que consigamos, juntos como equipe, entregar solu\u00e7\u00f5es eficientes e inteligentes nos nossos projetos.</p> <p>Antes de come\u00e7armos a escrever aqui, pensamos muito em: por onde come\u00e7ar? \ud83e\udd14 Como que, a partir de um texto, conseguir\u00edamos atingir a alma de um desenvolvedor? Mas chegamos na solu\u00e7\u00e3o de que n\u00e3o existe um caminho certo para isso, existem muitos meio de fazer isso e tamb\u00e9m pode variar de pessoa para pessoa, mas \u00e9 fato que ningu\u00e9m gosta de textos longos, por isso vamos elencar alguns t\u00f3picos, com explica\u00e7\u00f5es, que s\u00e3o importantes para a gente como empresa e tamb\u00e9m para todos como progresso e crescimento profissional, porque afinal, melhorando o nosso c\u00f3digo, teremos melhores oportunidades de crescimento. Vamos l\u00e1!</p>"},{"location":"#fazer-o-simples-e-bem-feito-da-mais-resultados-do-que-solucoes-complexas","title":"Fazer o simples e bem feito d\u00e1 mais resultados do que solu\u00e7\u00f5es complexas \u2728","text":"<p>Priorize solu\u00e7\u00f5es simples e eficazes</p> <p>Temos, muitas vezes, a mentalidade de que, para um projeto ser bem sucedido, precisamos desenvolver solu\u00e7\u00f5es demasiadamente complexas para serem inovadoras e resolverem problemas dos clientes, que muitas vezes s\u00e3o simples. Com isso em mente, sempre antes de partirmos desenvolver, temos que sentar e pensar: essa \u00e9 a melhor solu\u00e7\u00e3o? Existe algum caminho menos complexo que este que estou seguindo?</p> <p>Dizemos isso porque caminhos complexos tendem a levantar muito custo de manuten\u00e7\u00e3o ao longo prazo, que se fossem mais simples, manuten\u00e7\u00f5es seriam mais facilmente realizadas e conseguir\u00edamos entender muito mais o c\u00f3digo e focar em aperfei\u00e7oamentos. Dito isso, precisamos sempre ter o lema em mente: fazer o simples e bem feito \u00e9 melhor do que fazer solu\u00e7\u00f5es extraordin\u00e1rias. O extraordin\u00e1rio \u00e9 simples. Lembre-se, o c\u00f3digo \u00e9 feito como a vida, as maiores felicidades est\u00e3o nas coisas simples!</p>"},{"location":"#evolucao-incremental","title":"Evolu\u00e7\u00e3o incremental \ud83d\udcc8","text":"<p>Desenvolva iterativamente</p> <p>Existe um ditado popular que diz \u201cde gr\u00e3o em gr\u00e3o a galinha enche o papo\u201d. Isso pode nos trazer uma reflex\u00e3o profunda sobre como devemos desenvolver nossas solu\u00e7\u00f5es. Mas Cog, de que forma? Pense que, ao inv\u00e9s de levarmos semanas para entregarmos aquele modelo com uma precis\u00e3o absurda ou aquele pipeline de dados com dbt e fluxos automatizados funcionando sem nenhum erro, poder\u00edamos come\u00e7ar com algo mais baseline e ir incrementando aos poucos, tornando-se no fim, uma solu\u00e7\u00e3o completa e eficiente.</p> <p>Portanto, quando desenvolvermos solu\u00e7\u00f5es, foque sempre em mostrar evolu\u00e7\u00f5es incrementais e n\u00e3o somente focar em algo final. Darmos um passo de cada vez \u00e9 melhor do que corrermos o risco de cair.</p>"},{"location":"#apaixone-se-pelo-problema-nao-pela-solucao","title":"Apaixone-se pelo problema, n\u00e3o pela solu\u00e7\u00e3o \ud83d\udc96","text":"<p>Foque no problema, n\u00e3o na solu\u00e7\u00e3o</p> <p>Quando voc\u00ea est\u00e1 desenvolvendo, o que primeiro passa na sua cabe\u00e7a? A forma como est\u00e1 desenvolvendo ou qual \u00e9 o seu problema? Um erro muito comum que muitos desenvolvedores cometem \u00e9 se apaixonar pela solu\u00e7\u00e3o que vai ser usada e n\u00e3o pelo problema. Mas pra que isso? Virou romance agora?</p> <p>Se estamos obcecados pela solu\u00e7\u00e3o, muitas vezes esquecemos do ponto mais importante: precisamos resolver o problema. Por isso \u00e9 importante sempre termos bem fresco na nossa cabe\u00e7a o problema que estamos trabalhando, visando garantir que a solu\u00e7\u00e3o que estamos desenvolvendo \u00e9 a melhor para solucion\u00e1-lo.</p>"},{"location":"#working-backwards","title":"Working Backwards \ud83d\udd04","text":"<p>Planeje do resultado final para o in\u00edcio</p> <p>Talvez aqui voc\u00ea se lembre da Amazon, n\u00e3o sabemos se ela inventou esse m\u00e9todo ou se foi ela que a popularizou, mas essa forma de pensarmos no projeto \u00e9 fundamental para seu sucesso. Ent\u00e3o pensando nessa mesma linha, antes de come\u00e7armos a colocar a m\u00e3o na massa, devemos pensar l\u00e1 na frente, mais especificamente, de tr\u00e1s pra frente! </p> <p>Fazendo isso, conseguimos ter uma vis\u00e3o muito melhor do que devemos fazer, ou seja, como o nosso cliente usaria. Isso vai muito na linha do que falamos no come\u00e7o: criar uma base s\u00f3lida antes de construirmos nossa casa. Ent\u00e3o antes de desenvolvermos, sempre devemos pensar na nossa sa\u00edda final, nos nossos testes e experimentos que iremos fazer, formas de avalia\u00e7\u00e3o. Devemos fazer exatamente o caminho inverso, pensando sempre na melhor forma de fazer aquela etapa.</p>"},{"location":"analytics/start/","title":"Sugest\u00f5es","text":"<ul> <li> <p>Dashboards</p> </li> <li> <p>Ferramentas de Visualiza\u00e7\u00e3o</p> </li> <li> <p>Ferramentas de BI, ETL e An\u00e1lises</p> </li> <li> <p>T\u00e9cnicas</p> </li> <li> <p>dbt</p> </li> </ul>"},{"location":"data_eng/start/","title":"Sugest\u00f5es","text":"<ul> <li> <p>Estrutura de Dados</p> </li> <li> <p>Pipelines</p> </li> <li> <p>Ferramentas de Armazenamento</p> </li> <li> <p>Orquestra\u00e7\u00e3o de Jobs</p> </li> <li> <p>Monitoramento</p> </li> </ul>"},{"location":"data_science/start/","title":"Sugest\u00f5es","text":"<ul> <li>Metodologia de Modelagem</li> <li>Experimenta\u00e7\u00e3o e Testes</li> <li>Modelos e Entreg\u00e1veis</li> </ul>"},{"location":"global/code/","title":"Vamos ao C\u00f3digo \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb","text":""},{"location":"global/code/#padronizacao-de-codigo","title":"Padroniza\u00e7\u00e3o de C\u00f3digo","text":"<ul> <li>Por que seguir uma padroniza\u00e7\u00e3o de c\u00f3digo? \ud83e\udd14</li> </ul> <p>Seguir uma boa padroniza\u00e7\u00e3o do c\u00f3digo garante muito mais do que simplesmente um padr\u00e3o, garante facilidade ao ser replicado, lido e repassado para os demais desenvolvedores e mantenedores do c\u00f3digo.</p> <p>Com isso em mente, devemos seguir um padr\u00e3o, no qual pode ser lido nos seguintes links:</p> <ul> <li>Guia de Programa\u00e7\u00e3o Python | Google</li> </ul> <p>Os pontos que as documenta\u00e7\u00f5es acima trazem s\u00e3o importantes para os desenvolvimentos, mas alguns s\u00e3o obrigatoriamente necess\u00e1rios quando estamos desenvolvendo, listamos eles logo abaixo:</p> <ul> <li> <p>Nomes claros e objetivos: sempre precisamos definir claramente o que aquela vari\u00e1vel ou fun\u00e7\u00e3o vai fazer, n\u00e3o simplesmente definir nomes aleat\u00f3rios, pois isso pode dificultar a compreens\u00e3o futuramente. Da mesma forma, nunca misture idiomas, sempre use 100% do seu c\u00f3digo em ingl\u00eas ou 100% em portugu\u00eas.</p> <ul> <li> <p>Evite: nomes somente com letras \u00fanicas e nomes muitos gen\u00e9ricos, como <code>a</code> e <code>b</code> ou <code>var1</code> e <code>var2</code></p> <p>Em casos que as vari\u00e1veis seguem um padr\u00e3o, como em f\u00f3rmulas e itera\u00e7\u00f5es, pode-se utilizar de nomes comuns, como <code>i</code>, <code>j</code> e <code>x</code></p> </li> <li> <p>Sempre defina bem os nomes que vamos utilizar para n\u00e3o evitar confus\u00f5es</p> <ul> <li>Nomes claros e objetivos s\u00e3o essenciais para um bom c\u00f3digo </li> </ul> </li> <li> <p>Fique atento:</p> <ul> <li>Clean Code \u00e9 uma leitura recomenda</li> <li>Clean Code: Significado e Import\u00e2ncia para Desenvolvimento</li> </ul> </li> </ul> </li> <li> <p>Type Hints: \u00e9 necess\u00e1rio para sabermos quais s\u00e3o os tipos de dados que est\u00e3o trafegando pelas fun\u00e7\u00f5es, classes e demais estruturas do c\u00f3digo. Com ele, podemos facilmente compreender os tipos que devemos enviar para o nosso c\u00f3digo.</p> <ul> <li>Algumas refer\u00eancias: <ul> <li>PEP 484 \u2013 Type Hints</li> <li>Google Python Style Guide</li> <li>Type hints cheat sheet - mypy 1.8.0 documentation</li> </ul> </li> </ul> </li> <li> <p>Organiza\u00e7\u00e3o do c\u00f3digo: sempre atentar-se \u00e0s defini\u00e7\u00f5es que s\u00e3o feitas no c\u00f3digo, pois facilmente podemos gerar alguns bugs que, com um c\u00f3digo mal organizado, tornam-se dif\u00edceis de corrigir.</p> <ul> <li>Fique ligado:<ul> <li>Execute o <code>pylint</code> ou o <code>ruff</code> sobre seu c\u00f3digo para encontrar bugs e defini\u00e7\u00f5es faltando, siga os pontos que forem retornados para voc\u00ea e garanta que seu c\u00f3digo esteja o melhor poss\u00edvel</li> <li>Google Python Style Guide</li> <li>6 Python Best Practices for Better Code | DataCamp</li> <li>PEP 8 \u2013 Style Guide for Python Code</li> </ul> </li> </ul> </li> <li> <p>Lembre-se de sempre utilizar processos eficientes</p> </li> <li> <p>Use e abuse do Git: todos os c\u00f3digos devem estar versionados com o Git, sem exce\u00e7\u00f5es. Caso n\u00e3o possua reposit\u00f3rio para subir, solicite ao PL ou TL. Todos os c\u00f3digos devem estar em um reposit\u00f3rio, n\u00e3o h\u00e1 exce\u00e7\u00f5es.</p> </li> <li> <p>Use formatadores para organizar o c\u00f3digo: Existem v\u00e1rios formatadores que podemos usar para dar aquele tapa no c\u00f3digo, use-os para garantir que todos que lerem seu c\u00f3digo, possam entender mais facilmente o que est\u00e1 acontecendo.</p> <ul> <li>Exemplos:<ul> <li>ruff \ud83d\udca1 Recomendado</li> <li>yapf</li> <li>black</li> </ul> </li> </ul> </li> </ul>"},{"location":"global/code/#documentacao-do-codigo","title":"Documenta\u00e7\u00e3o do C\u00f3digo","text":"<p>\u201cO c\u00f3digo \u00e9 lido com mais frequ\u00eancia do que escrito.\u201d - Guido van Rossum</p> <p>Com esse pensamento em mente, precisamos desenvolver sempre pensando em duas coisas: atingir o objetivo do desenvolvimento e deixar claro o que est\u00e1 sendo feito. Desta forma, \u00e9 importante termos em mente esses pontos para garantirmos que nosso c\u00f3digo possa ser lido com facilidade pelos pr\u00f3ximos desenvolvedores.</p> <p>Dessa forma, podemos seguir padr\u00f5es j\u00e1 definidos para o desenvolvimento, como docstrings, tipagem das vari\u00e1veis, coment\u00e1rios sucintos e READMEs para documentar os projetos. Alguns links para entendermos como seguir os padr\u00f5es:</p> <ul> <li> <p>Style guide \u2014 numpydoc v1.7.0rc0.dev0 Manual</p> </li> <li> <p>Documenting Python Code: A Complete Guide</p> </li> </ul> <p>Devemos sempre tentar acompanhar os pontos acima para garantir que estejamos seguindo o melhor caminho ao desenvolver. Alguns pontos que s\u00e3o necessariamente importantes:</p> <ul> <li> <p>Docstrings: fundamental para as fun\u00e7\u00f5es e m\u00e9todos, s\u00e3o definidas na PEP 257, os objetos python precisam ser documentados para conseguirmos entender os objetivos daquela fun\u00e7\u00e3o ou objeto. Para outras linguagens, deve-se buscar formas de documenta\u00e7\u00e3o padr\u00e3o para o seu c\u00f3digo.</p> </li> <li> <p>Tipagem: por conta do python ser uma linguagem din\u00e2mica, \u00e9 necess\u00e1rio identificar os tipos de vari\u00e1veis e retornos de fun\u00e7\u00f5es, pois facilitam o entendimento. Para outras linguagens que s\u00e3o fortemente tipadas, n\u00e3o faz necess\u00e1rio, mas para linguagens din\u00e2micas, a identifica\u00e7\u00e3o do tipo \u00e9 muito importante.</p> </li> <li> <p>Coment\u00e1rios em c\u00f3digo: importante serem feitos de forma sucinta, s\u00f3 para indicar l\u00f3gicas que s\u00e3o complexas de serem interpretadas.</p> </li> </ul>"},{"location":"global/documentation/","title":"Documenta\u00e7\u00f5es \ud83d\udcdd","text":"<p>Falar sobre:</p> <ul> <li> <p>O que pode-se usar para as documenta\u00e7\u00f5es     Ferramentas, t\u00e9cnicas, padr\u00f5es e etc</p> </li> <li> <p>Formas de documentar - README, docstrings, coment\u00e1rios, etc</p> </li> <li> <p>Dicas - como fazer uma boa documenta\u00e7\u00e3o, o que evitar, etc</p> </li> <li> <p>Exemplos de boas e m\u00e1s pr\u00e1ticas</p> </li> </ul>"},{"location":"global/git/","title":"O git \ud83d\ude01","text":"<ul> <li>Por que usar Git?</li> </ul> <p>O Git \u00e9 uma ferramenta essencial para o desenvolvimento de software moderno, oferecendo controle de vers\u00e3o distribu\u00eddo. Ele permite que equipes colaborem de forma eficiente, mantendo o hist\u00f3rico das altera\u00e7\u00f5es e garantindo que o c\u00f3digo esteja sempre organizado. Algumas vantagens principais incluem:</p> <ul> <li> <p>Hist\u00f3rico de Altera\u00e7\u00f5es: Permite rastrear todas as mudan\u00e7as feitas no c\u00f3digo ao longo do tempo.</p> </li> <li> <p>Colabora\u00e7\u00e3o: Suporta trabalho em equipe com branchs e merges, permitindo que m\u00faltiplos desenvolvedores trabalhem simultaneamente.</p> </li> <li> <p>Seguran\u00e7a: O armazenamento distribu\u00eddo garante que os dados estejam sempre seguros.</p> </li> <li> <p>Flexibilidade: Adapta-se a diferentes fluxos de trabalho e tamanhos de equipe.</p> </li> </ul>"},{"location":"global/git/#padronizacao-de-commits","title":"Padroniza\u00e7\u00e3o de Commits","text":"<p>A padroniza\u00e7\u00e3o dos commits tem como objetivo trazer um hist\u00f3rico mais detalhado para o projeto, onde podemos ver \u201cde cara\u201d as mudan\u00e7as que foram implementadas com aquele commit e atualiza\u00e7\u00f5es do reposit\u00f3rio. Um commit deve ser feito sempre que fazemos alguma altera\u00e7\u00e3o no c\u00f3digo, como uma feature, fix, docs e etc. A granularidade dos commits podem variar, dessa forma, devemos sempre fazer o commit quando terminamos de fazer determinada tarefa, como corrigir um bug, implementar uma feature, criar a documenta\u00e7\u00e3o, ajustar o estilo do c\u00f3digo, etc. E, para facilitar o entendimento do que cada commit representa, devemos seguir o padr\u00e3o de commits sem\u00e2nticos, para garantir que conseguimos entender diretamente o que foi feito.</p> <p>Para isso, podemos seguir o seguinte padr\u00e3o:</p> <pre><code>&lt;tipo&gt;(escopo opcional): &lt;descri\u00e7\u00e3o&gt;\n</code></pre> <p>Onde cada estrutura tem uma fun\u00e7\u00e3o espec\u00edfica:</p> <ul> <li> <p>type: indica o tipo do commit. Podemos ter alguns tipos, que podem variar, mas ambos devem seguir o mesmo padr\u00e3o e devem ser sucintos ao indicar o tipo do commit. Alguns exemplos s\u00e3o:</p> <ul> <li>feat: identifica um novo recurso</li> <li>fix: corre\u00e7\u00e3o de um bug</li> <li>chore: altera\u00e7\u00f5es que n\u00e3o est\u00e3o relacionadas a uma corre\u00e7\u00e3o ou recurso e n\u00e3o modificam arquivos src ou de teste (por exemplo, atualiza\u00e7\u00e3o de depend\u00eancias)</li> <li>refactor: c\u00f3digo refatorado que n\u00e3o corrige um bug nem adiciona um recurso</li> <li>docs: atualiza\u00e7\u00f5es na documenta\u00e7\u00e3o, como o README ou outros arquivos markdown</li> <li>style: altera\u00e7\u00f5es que n\u00e3o afetam o significado do c\u00f3digo, provavelmente relacionadas \u00e0 formata\u00e7\u00e3o do c\u00f3digo, como espa\u00e7o em branco, falta de ponto e v\u00edrgula e assim por diante.</li> <li>test: incluindo testes novos ou corrigindo testes anteriores</li> <li>perf: melhoria na performance do c\u00f3digo</li> <li>ci: integra\u00e7\u00e3o cont\u00ednua relacionada</li> <li>build: mudan\u00e7as que afetam o sistema de compila\u00e7\u00e3o ou depend\u00eancias externas</li> <li>revert: reverte um commit anterior</li> </ul> </li> <li> <p>scope: Escopo onde foi feito o commit, ou seja, onde foi feita a altera\u00e7\u00e3o. Pode ser um componente, uma p\u00e1gina, um m\u00f3dulo, etc. Esse campo \u00e9 opcional, mas \u00e9 interessante para facilitar a busca de commits relacionados a um determinado escopo.</p> </li> <li> <p>description: Aqui deve-se trazer a descri\u00e7\u00e3o da altera\u00e7\u00e3o que foi feita. Essa descri\u00e7\u00e3o deve ser feita sucintamente, buscando ser direto ao ponto e explicar bem o que foi feito. Evitar descri\u00e7\u00f5es muito vagas, onde n\u00e3o se tem ideia do que foi feito. Tamb\u00e9m podemos adicionar aqui o link da tarefa do ClickUp referente ao commit.</p> </li> </ul>"},{"location":"global/git/#exemplos","title":"Exemplos:","text":"<ul> <li> <p>Bons: \u2705</p> <ul> <li> <p><code>feat: melhora do desempenho com o carregamento lento das imagens</code></p> </li> <li> <p><code>feat(auth): implementa autentica\u00e7\u00e3o JWT</code></p> </li> <li> <p><code>fix: corre\u00e7\u00e3o do treinamento do modelo, fazendo o fit na por\u00e7\u00e3o correta do treinamento</code></p> </li> <li> <p><code>chore: inser\u00e7\u00e3o de depend\u00eancia faltando - scikit-learn</code></p> </li> <li> <p><code>docs: atualiza\u00e7\u00e3o do README com instru\u00e7\u00f5es de instala\u00e7\u00e3o</code></p> </li> <li> <p><code>fix(api): corrige erro no endpoint de usu\u00e1rios</code></p> </li> <li> <p><code>style: aplica\u00e7\u00e3o de formatador de c\u00f3digo black</code></p> </li> </ul> </li> <li> <p>Ruins: \u274c</p> <ul> <li> <p><code>agora vai!</code></p> </li> <li> <p><code>&lt;vazio&gt;</code></p> </li> <li> <p><code>corre\u00e7\u00e3o de um erro</code></p> </li> <li> <p><code>commit 2</code></p> </li> </ul> </li> </ul>"},{"location":"global/git/#trabalhando-com-branches","title":"Trabalhando com Branches","text":"<p>Branches s\u00e3o uma parte fundamental do Git, permitindo que voc\u00ea trabalhe em diferentes vers\u00f5es do seu c\u00f3digo ao mesmo tempo. Eles s\u00e3o \u00fateis para isolar o trabalho em progresso, testar novas funcionalidades e colaborar com outros desenvolvedores.</p> <p>Beleza, todos os reposit\u00f3rios possuem branches, mas quando eu devo abrir uma branch ou como eu devo abrir uma branch?</p> <p>Sempre que voc\u00ea for trabalhar em uma nova funcionalidade, corre\u00e7\u00e3o de bug ou qualquer outra tarefa, voc\u00ea deve abrir uma branch para isso. Isso ajuda a manter o c\u00f3digo organizado e facilita a revis\u00e3o de c\u00f3digo.</p> <p>Nos reposit\u00f3rios do projeto, temos algumas conven\u00e7\u00f5es para nomear as branches:</p> <ul> <li><code>main</code> ou <code>master</code>: Vers\u00e3o est\u00e1vel, pronta para produ\u00e7\u00e3o.</li> <li><code>develop</code>: Branch principal para desenvolvimento.</li> <li><code>feature/&lt;nome&gt;</code>: Para novas funcionalidades.</li> <li><code>hotfix/&lt;nome&gt;</code>: Corre\u00e7\u00f5es cr\u00edticas em produ\u00e7\u00e3o.</li> <li><code>bugfix/&lt;nome&gt;</code>: Corre\u00e7\u00e3o de bugs detectados no ambiente de testes.</li> </ul> <p>Exemplos:</p> <ul> <li><code>feature/melhorias-performance</code></li> <li><code>hotfix/corrige-login</code></li> <li><code>bugfix/ajuste-tamanho-imagem</code></li> </ul>"},{"location":"global/git/#merges-e-pull-requests","title":"Merges e Pull Requests","text":"<p>Quando voc\u00ea terminar de trabalhar em uma branch, voc\u00ea deve criar um Pull Request (PR) para mesclar suas altera\u00e7\u00f5es de volta para a branch principal. Isso permite que outros desenvolvedores revisem seu c\u00f3digo e forne\u00e7am feedback antes de mesclar as altera\u00e7\u00f5es.</p> <p>Para garantir que nosso PR seja revisado e mesclado com sucesso, devemos seguir algumas boas pr\u00e1ticas:</p> <ul> <li> <p>Tamanho dos PRs: os PRs deve ser sucintos e diretos ao ponto, PRs muitos grandes podem ser demorados para serem revisados</p> </li> <li> <p>T\u00edtulo e Descri\u00e7\u00e3o: um PR bem descrito e detalhado leva a um review mais objetivo e r\u00e1pido. Busque sempre elaborar um t\u00edtulo auto explicativo que descreva o que o PR faz. Na descri\u00e7\u00e3o, sempre detalhe o que foi alterado, por que foi alterado e como foi alterado.</p> <ul> <li> <p>Use prints, se necess\u00e1rio, para detalhar as modifica\u00e7\u00f5es.</p> </li> <li> <p>Aqui devemos tamb\u00e9m sempre adicionar o card do ClickUp, quando poss\u00edvel referenciar, para conseguirmos linkar a tarefa relacionada com a entrega.</p> </li> </ul> </li> <li> <p>Os PRs sempre devem ser feitos para uma branch abaixo da main/master, como a develop, homolog ou outra branch de testes antes de subir para a main/master</p> </li> <li> <p>Sempre que abrirmos um PR devemos avisar, no Slack, o Project Lead e o Tech Lead do projeto, bem como os revisores respons\u00e1veis. De prefer\u00eancia, mande no canal do projeto.</p> </li> <li> <p>Fique ligado:</p> <ul> <li>The anatomy of a perfect pull request | by Hugo Dias</li> </ul> </li> </ul>"},{"location":"global/git/#reviews","title":"Reviews","text":"<p>A arte de revisar \u00e9 importante, todo PR deve ser revisado antes de ser mesclado na branch destino. Desta forma, devemos sempre marcar algu\u00e9m como revisor. No contexto dos projetos, sempre que tivermos a figura do Tech Lead, ele deve ser a pessoa que ir\u00e1 revisar, ou, em caso de d\u00favida, sempre pergunte ao PL, ele saber\u00e1 indicar quem dever\u00e1 ser marcado como revisor. </p> <p>Caso n\u00e3o exista algu\u00e9m para revisar no momento, isso deve ser apontado no PR! Trazendo como coment\u00e1rio ou ponto adicional para deixar claro que n\u00e3o existia algu\u00e9m para revisar no momento.</p> <p>\ud83d\udcd2 Fique ligado: Code Review</p> <p>Assim que o revisor fizer a revis\u00e3o, teremos tr\u00eas caminhos poss\u00edveis:</p> <ul> <li> <p>PR Aprovado \u2705: pode-se seguir o fluxo e realizar o merge na branch principal, fechando, dessa forma, o PR. Sendo feito o merge, devemos avisar no Slack que o merge foi feito e as altera\u00e7\u00f5es j\u00e1 foram realizadas. Se voc\u00ea for o revisor, sempre avise que aprovou o PR no canal do Slack.</p> </li> <li> <p>Altera\u00e7\u00f5es Solicitadas \ud83d\udea7: o revisor detectou que existem altera\u00e7\u00f5es a serem realizadas, dessa forma devemos ver os coment\u00e1rios deixados pelo revisor no PR (se voc\u00ea for o revisor, sempre avise que solicitou altera\u00e7\u00f5es no canal do Slack). Ap\u00f3s realizar as altera\u00e7\u00f5es, devemos solicitar ao revisor que olhe se est\u00e1 tudo ok, ele dando o aceite, podemos seguir para o merge e o processo corre como no t\u00f3pico anterior.</p> </li> <li> <p>PR Reprovado \u274c: Neste caso o seu PR, por algum motivo que deve ser esclarecido pelo revisor, foi reprovado. Caso voc\u00ea seja o revisor, sempre comunique o motivo que levou a ser recusado e o que deve-se ser feito para os pr\u00f3ximos passos.</p> </li> </ul>"},{"location":"global/git/#boas-praticas-com-git","title":"Boas Pr\u00e1ticas com Git","text":""},{"location":"global/git/#1-commits-frequentes-e-pequenos","title":"1. Commits Frequentes e Pequenos","text":"<p>Realize commits com frequ\u00eancia para evitar perda de trabalho e facilitar revis\u00f5es.</p>"},{"location":"global/git/#2-evite-commits-ambiguos","title":"2. Evite Commits Amb\u00edguos","text":"<p>Sempre use mensagens descritivas e espec\u00edficas. Evite commits como \"agora vai\" ou \"pequenos ajustes\".</p>"},{"location":"global/git/#3-resolvendo-conflitos","title":"3. Resolvendo Conflitos","text":"<p>Conflitos podem surgir ao trabalhar em equipes. Resolva-os seguindo este fluxo:</p> <ul> <li>Identifique os arquivos em conflito:</li> </ul> <pre><code>git status\n</code></pre> <ul> <li> <p>Abra os arquivos em conflito e resolva as diferen\u00e7as manualmente.</p> </li> <li> <p>Adicione os arquivos resolvidos:</p> </li> </ul> <pre><code>git add &lt;arquivo&gt;\n</code></pre> <ul> <li>Continue com o merge:</li> </ul> <pre><code>git merge --continue\n</code></pre>"},{"location":"global/git/#4-automatizacao","title":"4. Automatiza\u00e7\u00e3o","text":"<p>Use ferramentas como <code>pre-commit hooks</code> para automatizar valida\u00e7\u00f5es, como linting e formata\u00e7\u00e3o.</p>"},{"location":"global/git/#comandos-uteis-do-git","title":"Comandos \u00dateis do Git","text":"Comando Descri\u00e7\u00e3o <code>git status</code> Verifica o estado atual do reposit\u00f3rio. <code>git log</code> Exibe o hist\u00f3rico de commits. <code>git diff</code> Mostra diferen\u00e7as entre vers\u00f5es. <code>git stash</code> Salva mudan\u00e7as temporariamente. <code>git reset --hard &lt;commit&gt;</code> Restaura o reposit\u00f3rio para um commit espec\u00edfico. <code>git rebase -i &lt;branch&gt;</code> Reorganiza commits para uma branch."},{"location":"global/repositories/","title":"Reposit\u00f3rios","text":"<p>Falar sobre:</p> <ul> <li> <p>Import\u00e2ncia do reposit\u00f3rio</p> </li> <li> <p>A melhor forma de utilizar</p> </li> <li> <p>Padr\u00f5es de organiza\u00e7\u00e3o</p> </li> </ul>"}]}