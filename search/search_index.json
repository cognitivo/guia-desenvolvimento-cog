{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo ao Guia de Desenvolvimento Cognitivo.ai","text":"<p>Este \u00e9 o guia de desenvolvimento da Cognitivo.ai, que tem como objetivo padronizar o desenvolvimento de projetos e auxiliar no desenvolvimento de solu\u00e7\u00f5es de forma mais eficiente e organizada.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<ul> <li> <p>Fornecer um guia de desenvolvimento para os projetos da Cognitivo.ai</p> </li> <li> <p>Auxiliar no desenvolvimento das solu\u00e7\u00f5es propostas e padroniza\u00e7\u00e3o das mesmas</p> </li> <li> <p>Gerenciar a organiza\u00e7\u00e3o e padroniza\u00e7\u00e3o do c\u00f3digo e documenta\u00e7\u00f5es dos projetos</p> </li> <li> <p>Facilitar a integra\u00e7\u00e3o entre os times de desenvolvimento</p> </li> </ul>"},{"location":"#filosofia-de-desenvolvimento","title":"Filosofia de Desenvolvimento \ud83d\udcad","text":"<p>Quando come\u00e7amos um projeto, o nosso primeiro instinto \u00e9 pegar logo a ideia e come\u00e7ar a codificar sem ao menos pararmos para pensar no que estamos fazendo, olhamos somente para onde queremos chegar e n\u00e3o no como queremos chegar l\u00e1. Isso \u00e9 um instinto natural que muitas vezes temos n\u00e3o s\u00f3 nos projetos, mas na nossa vida como um todo, e, na maioria das vezes, n\u00e3o pensamos em um ponto crucial, que fazer algo sem estruturar uma jornada, pode gerar enormes agravantes l\u00e1 na frente, afinal, nenhum pedreiro ou engenheiro civil sai construindo uma casa sem antes fazer uma boa base para suport\u00e1-la.</p> <p>Pensando nisso, antes de entrar em defini\u00e7\u00f5es de reposit\u00f3rios, padr\u00f5es de c\u00f3digo e muitos outros pontos que nos ajudaram a padronizar nossas solu\u00e7\u00f5es, vamos falar um pouco sobre mentalidade de codar de uma forma estruturada e n\u00e3o deixar que nenhuma ponta solta afete nosso desenvolvimento, para que consigamos, juntos como equipe, entregar solu\u00e7\u00f5es eficientes e inteligentes nos nossos projetos.</p> <p>Antes de come\u00e7armos a escrever aqui, pensamos muito em: por onde come\u00e7ar? \ud83e\udd14 Como que, a partir de um texto, conseguir\u00edamos atingir a alma de um desenvolvedor? Mas chegamos na solu\u00e7\u00e3o de que n\u00e3o existe um caminho certo para isso, existem muitos meio de fazer isso e tamb\u00e9m pode variar de pessoa para pessoa, mas \u00e9 fato que ningu\u00e9m gosta de textos longos, por isso vamos elencar alguns t\u00f3picos, com explica\u00e7\u00f5es, que s\u00e3o importantes para a gente como empresa e tamb\u00e9m para todos como progresso e crescimento profissional, porque afinal, melhorando o nosso c\u00f3digo, teremos melhores oportunidades de crescimento. Vamos l\u00e1!</p>"},{"location":"#fazer-o-simples-e-bem-feito-da-mais-resultados-do-que-solucoes-complexas","title":"Fazer o simples e bem feito d\u00e1 mais resultados do que solu\u00e7\u00f5es complexas \u2728","text":"<p>Priorize solu\u00e7\u00f5es simples e eficazes</p> <p>Temos, muitas vezes, a mentalidade de que, para um projeto ser bem sucedido, precisamos desenvolver solu\u00e7\u00f5es demasiadamente complexas para serem inovadoras e resolverem problemas dos clientes, que muitas vezes s\u00e3o simples. Com isso em mente, sempre antes de partirmos desenvolver, temos que sentar e pensar: essa \u00e9 a melhor solu\u00e7\u00e3o? Existe algum caminho menos complexo que este que estou seguindo?</p> <p>Dizemos isso porque caminhos complexos tendem a levantar muito custo de manuten\u00e7\u00e3o ao longo prazo, que se fossem mais simples, manuten\u00e7\u00f5es seriam mais facilmente realizadas e conseguir\u00edamos entender muito mais o c\u00f3digo e focar em aperfei\u00e7oamentos. Dito isso, precisamos sempre ter o lema em mente: fazer o simples e bem feito \u00e9 melhor do que fazer solu\u00e7\u00f5es extraordin\u00e1rias. O extraordin\u00e1rio \u00e9 simples. Lembre-se, o c\u00f3digo \u00e9 feito como a vida, as maiores felicidades est\u00e3o nas coisas simples!</p>"},{"location":"#evolucao-incremental","title":"Evolu\u00e7\u00e3o incremental \ud83d\udcc8","text":"<p>Desenvolva iterativamente</p> <p>Existe um ditado popular que diz \u201cde gr\u00e3o em gr\u00e3o a galinha enche o papo\u201d. Isso pode nos trazer uma reflex\u00e3o profunda sobre como devemos desenvolver nossas solu\u00e7\u00f5es. Mas Cog, de que forma? Pense que, ao inv\u00e9s de levarmos semanas para entregarmos aquele modelo com uma precis\u00e3o absurda ou aquele pipeline de dados com dbt e fluxos automatizados funcionando sem nenhum erro, poder\u00edamos come\u00e7ar com algo mais baseline e ir incrementando aos poucos, tornando-se no fim, uma solu\u00e7\u00e3o completa e eficiente.</p> <p>Portanto, quando desenvolvermos solu\u00e7\u00f5es, foque sempre em mostrar evolu\u00e7\u00f5es incrementais e n\u00e3o somente focar em algo final. Darmos um passo de cada vez \u00e9 melhor do que corrermos o risco de cair.</p>"},{"location":"#apaixone-se-pelo-problema-nao-pela-solucao","title":"Apaixone-se pelo problema, n\u00e3o pela solu\u00e7\u00e3o \ud83d\udc96","text":"<p>Foque no problema, n\u00e3o na solu\u00e7\u00e3o</p> <p>Quando voc\u00ea est\u00e1 desenvolvendo, o que primeiro passa na sua cabe\u00e7a? A forma como est\u00e1 desenvolvendo ou qual \u00e9 o seu problema? Um erro muito comum que muitos desenvolvedores cometem \u00e9 se apaixonar pela solu\u00e7\u00e3o que vai ser usada e n\u00e3o pelo problema. Mas pra que isso? Virou romance agora?</p> <p>Se estamos obcecados pela solu\u00e7\u00e3o, muitas vezes esquecemos do ponto mais importante: precisamos resolver o problema. Por isso \u00e9 importante sempre termos bem fresco na nossa cabe\u00e7a o problema que estamos trabalhando, visando garantir que a solu\u00e7\u00e3o que estamos desenvolvendo \u00e9 a melhor para solucion\u00e1-lo.</p>"},{"location":"#working-backwards","title":"Working Backwards \ud83d\udd04","text":"<p>Planeje do resultado final para o in\u00edcio</p> <p>Talvez aqui voc\u00ea se lembre da Amazon, n\u00e3o sabemos se ela inventou esse m\u00e9todo ou se foi ela que a popularizou, mas essa forma de pensarmos no projeto \u00e9 fundamental para seu sucesso. Ent\u00e3o pensando nessa mesma linha, antes de come\u00e7armos a colocar a m\u00e3o na massa, devemos pensar l\u00e1 na frente, mais especificamente, de tr\u00e1s pra frente! </p> <p>Fazendo isso, conseguimos ter uma vis\u00e3o muito melhor do que devemos fazer, ou seja, como o nosso cliente usaria. Isso vai muito na linha do que falamos no come\u00e7o: criar uma base s\u00f3lida antes de construirmos nossa casa. Ent\u00e3o antes de desenvolvermos, sempre devemos pensar na nossa sa\u00edda final, nos nossos testes e experimentos que iremos fazer, formas de avalia\u00e7\u00e3o. Devemos fazer exatamente o caminho inverso, pensando sempre na melhor forma de fazer aquela etapa.</p>"},{"location":"analytics/start/","title":"Sugest\u00f5es","text":"<ul> <li> <p>Dashboards</p> </li> <li> <p>Ferramentas de Visualiza\u00e7\u00e3o</p> </li> <li> <p>Ferramentas de BI, ETL e An\u00e1lises</p> </li> <li> <p>T\u00e9cnicas</p> </li> <li> <p>dbt</p> </li> </ul>"},{"location":"data_eng/start/","title":"Sugest\u00f5es","text":"<ul> <li> <p>Estrutura de Dados</p> </li> <li> <p>Pipelines</p> </li> <li> <p>Ferramentas de Armazenamento</p> </li> <li> <p>Orquestra\u00e7\u00e3o de Jobs</p> </li> <li> <p>Monitoramento</p> </li> </ul>"},{"location":"data_science/start/","title":"Sugest\u00f5es","text":"<ul> <li>Metodologia de Modelagem</li> <li>Experimenta\u00e7\u00e3o e Testes</li> <li>Modelos e Entreg\u00e1veis</li> </ul>"},{"location":"global/code/","title":"Vamos ao C\u00f3digo \ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb","text":""},{"location":"global/code/#padronizacao-de-codigo","title":"Padroniza\u00e7\u00e3o de C\u00f3digo","text":"<ul> <li>Por que seguir uma padroniza\u00e7\u00e3o de c\u00f3digo? \ud83e\udd14</li> </ul> <p>Seguir uma boa padroniza\u00e7\u00e3o do c\u00f3digo garante muito mais do que simplesmente um padr\u00e3o, garante facilidade ao ser replicado, lido e repassado para os demais desenvolvedores e mantenedores do c\u00f3digo.</p> <p>Com isso em mente, devemos seguir um padr\u00e3o, no qual pode ser lido nos seguintes links:</p> <ul> <li>Guia de Programa\u00e7\u00e3o Python | Google</li> </ul> <p>Os pontos que as documenta\u00e7\u00f5es acima trazem s\u00e3o importantes para os desenvolvimentos, mas alguns s\u00e3o obrigatoriamente necess\u00e1rios quando estamos desenvolvendo, listamos eles logo abaixo:</p> <ul> <li> <p>Nomes claros e objetivos: sempre precisamos definir claramente o que aquela vari\u00e1vel ou fun\u00e7\u00e3o vai fazer, n\u00e3o simplesmente definir nomes aleat\u00f3rios, pois isso pode dificultar a compreens\u00e3o futuramente. Da mesma forma, nunca misture idiomas, sempre use 100% do seu c\u00f3digo em ingl\u00eas ou 100% em portugu\u00eas.</p> <ul> <li> <p>Evite: nomes somente com letras \u00fanicas e nomes muitos gen\u00e9ricos, como <code>a</code> e <code>b</code> ou <code>var1</code> e <code>var2</code></p> <p>Em casos que as vari\u00e1veis seguem um padr\u00e3o, como em f\u00f3rmulas e itera\u00e7\u00f5es, pode-se utilizar de nomes comuns, como <code>i</code>, <code>j</code> e <code>x</code></p> </li> <li> <p>Sempre defina bem os nomes que vamos utilizar para n\u00e3o evitar confus\u00f5es</p> <ul> <li>Nomes claros e objetivos s\u00e3o essenciais para um bom c\u00f3digo </li> </ul> </li> <li> <p>Fique atento:</p> <ul> <li>Clean Code \u00e9 uma leitura recomenda</li> <li>Clean Code: Significado e Import\u00e2ncia para Desenvolvimento</li> </ul> </li> </ul> </li> <li> <p>Type Hints: \u00e9 necess\u00e1rio para sabermos quais s\u00e3o os tipos de dados que est\u00e3o trafegando pelas fun\u00e7\u00f5es, classes e demais estruturas do c\u00f3digo. Com ele, podemos facilmente compreender os tipos que devemos enviar para o nosso c\u00f3digo.</p> <ul> <li>Algumas refer\u00eancias: <ul> <li>PEP 484 \u2013 Type Hints</li> <li>Google Python Style Guide</li> <li>Type hints cheat sheet - mypy 1.8.0 documentation</li> </ul> </li> </ul> </li> <li> <p>Organiza\u00e7\u00e3o do c\u00f3digo: sempre atentar-se \u00e0s defini\u00e7\u00f5es que s\u00e3o feitas no c\u00f3digo, pois facilmente podemos gerar alguns bugs que, com um c\u00f3digo mal organizado, tornam-se dif\u00edceis de corrigir.</p> <ul> <li>Fique ligado:<ul> <li>Execute o <code>pylint</code> ou o <code>ruff</code> sobre seu c\u00f3digo para encontrar bugs e defini\u00e7\u00f5es faltando, siga os pontos que forem retornados para voc\u00ea e garanta que seu c\u00f3digo esteja o melhor poss\u00edvel</li> <li>Google Python Style Guide</li> <li>6 Python Best Practices for Better Code | DataCamp</li> <li>PEP 8 \u2013 Style Guide for Python Code</li> </ul> </li> </ul> </li> <li> <p>Lembre-se de sempre utilizar processos eficientes</p> </li> <li> <p>Use e abuse do Git: todos os c\u00f3digos devem estar versionados com o Git, sem exce\u00e7\u00f5es. Caso n\u00e3o possua reposit\u00f3rio para subir, solicite ao PL ou TL. Todos os c\u00f3digos devem estar em um reposit\u00f3rio, n\u00e3o h\u00e1 exce\u00e7\u00f5es.</p> </li> <li> <p>Use formatadores para organizar o c\u00f3digo: Existem v\u00e1rios formatadores que podemos usar para dar aquele tapa no c\u00f3digo, use-os para garantir que todos que lerem seu c\u00f3digo, possam entender mais facilmente o que est\u00e1 acontecendo.</p> <ul> <li>Exemplos:<ul> <li>ruff \ud83d\udca1 Recomendado</li> <li>yapf</li> <li>black</li> </ul> </li> </ul> </li> </ul>"},{"location":"global/code/#documentacao-do-codigo","title":"Documenta\u00e7\u00e3o do C\u00f3digo","text":"<p>\u201cO c\u00f3digo \u00e9 lido com mais frequ\u00eancia do que escrito.\u201d - Guido van Rossum</p> <p>Com esse pensamento em mente, precisamos desenvolver sempre pensando em duas coisas: atingir o objetivo do desenvolvimento e deixar claro o que est\u00e1 sendo feito. Desta forma, \u00e9 importante termos em mente esses pontos para garantirmos que nosso c\u00f3digo possa ser lido com facilidade pelos pr\u00f3ximos desenvolvedores.</p> <p>Dessa forma, podemos seguir padr\u00f5es j\u00e1 definidos para o desenvolvimento, como docstrings, tipagem das vari\u00e1veis, coment\u00e1rios sucintos e READMEs para documentar os projetos. Alguns links para entendermos como seguir os padr\u00f5es:</p> <ul> <li> <p>Style guide \u2014 numpydoc v1.7.0rc0.dev0 Manual</p> </li> <li> <p>Documenting Python Code: A Complete Guide</p> </li> </ul> <p>Devemos sempre tentar acompanhar os pontos acima para garantir que estejamos seguindo o melhor caminho ao desenvolver. Alguns pontos que s\u00e3o necessariamente importantes:</p> <ul> <li> <p>Docstrings: fundamental para as fun\u00e7\u00f5es e m\u00e9todos, s\u00e3o definidas na PEP 257, os objetos python precisam ser documentados para conseguirmos entender os objetivos daquela fun\u00e7\u00e3o ou objeto. Para outras linguagens, deve-se buscar formas de documenta\u00e7\u00e3o padr\u00e3o para o seu c\u00f3digo.</p> </li> <li> <p>Tipagem: por conta do python ser uma linguagem din\u00e2mica, \u00e9 necess\u00e1rio identificar os tipos de vari\u00e1veis e retornos de fun\u00e7\u00f5es, pois facilitam o entendimento. Para outras linguagens que s\u00e3o fortemente tipadas, n\u00e3o faz necess\u00e1rio, mas para linguagens din\u00e2micas, a identifica\u00e7\u00e3o do tipo \u00e9 muito importante.</p> </li> <li> <p>Coment\u00e1rios em c\u00f3digo: importante serem feitos de forma sucinta, s\u00f3 para indicar l\u00f3gicas que s\u00e3o complexas de serem interpretadas.</p> </li> </ul>"},{"location":"global/documentation/","title":"Documenta\u00e7\u00f5es \ud83d\udcdd","text":"<p>Falar sobre:</p> <ul> <li> <p>O que pode-se usar para as documenta\u00e7\u00f5es     Ferramentas, t\u00e9cnicas, padr\u00f5es e etc</p> </li> <li> <p>Formas de documentar - README, docstrings, coment\u00e1rios, etc</p> </li> <li> <p>Dicas - como fazer uma boa documenta\u00e7\u00e3o, o que evitar, etc</p> </li> <li> <p>Exemplos de boas e m\u00e1s pr\u00e1ticas</p> </li> </ul>"},{"location":"global/git/","title":"O git \ud83c\udf33","text":""},{"location":"global/git/#por-que-o-git-existe","title":"Por que o Git existe?","text":"<p>O Git \u00e9 uma ferramenta essencial para o nosso trabalho. Este documento institucionaliza as boas pr\u00e1ticas e o processo que deve ser seguido em todos os projetos da Cognitivo.</p> <p>Nosso objetivo \u00e9 garantir que o c\u00f3digo seja padronizado, que tenhamos um hist\u00f3rico claro das altera\u00e7\u00f5es e que a nossa opera\u00e7\u00e3o seja eficaz e previs\u00edvel, eliminando riscos como a perda de c\u00f3digo. Ter um processo bem definido nos permite, acima de tudo, cobrar a sua utiliza\u00e7\u00e3o e manter um alto padr\u00e3o de qualidade.</p>"},{"location":"global/git/#padronizacao-de-commits-commits-semanticos","title":"Padroniza\u00e7\u00e3o de Commits (Commits Sem\u00e2nticos)","text":"<p>A padroniza\u00e7\u00e3o dos commits \u00e9 obrigat\u00f3ria e tem como objetivo trazer um hist\u00f3rico claro e rastre\u00e1vel para o projeto. Um commit deve representar uma unidade l\u00f3gica de trabalho, ou seja, uma etapa de uma tarefa completa que pode ser entendida de forma isolada.</p> <p>Para isso, seguimos o padr\u00e3o de commits sem\u00e2nticos:</p> <pre><code>&lt;tipo&gt;(escopo opcional): &lt;descri\u00e7\u00e3o&gt;\n</code></pre> <p>Onde cada estrutura tem uma fun\u00e7\u00e3o espec\u00edfica:</p> <ul> <li> <p>type: indica o tipo da altera\u00e7\u00e3o realizada no commit. Os tipos que utilizamos s\u00e3o:</p> <ul> <li>feat: Uma nova funcionalidade (feature).</li> <li>fix: Uma corre\u00e7\u00e3o de um bug (bug fix).</li> <li>docs: Altera\u00e7\u00f5es na documenta\u00e7\u00e3o.</li> <li>style: Formata\u00e7\u00e3o de c\u00f3digo que n\u00e3o altera a l\u00f3gica (espa\u00e7os, ponto e v\u00edrgula, etc.).</li> <li>refactor: Refatora\u00e7\u00e3o de c\u00f3digo que n\u00e3o corrige um bug nem adiciona uma funcionalidade, somente melhora a legibilidade ou a estrutura do c\u00f3digo.</li> <li>test: Adi\u00e7\u00e3o ou corre\u00e7\u00e3o de testes.</li> <li>chore: Outras altera\u00e7\u00f5es que n\u00e3o modificam o c\u00f3digo-fonte ou testes (ex: atualiza\u00e7\u00e3o de depend\u00eancias).</li> </ul> </li> <li> <p>scope: (Opcional) Escopo da altera\u00e7\u00e3o (ex: api, modelo, auth).</p> </li> <li> <p>description: Descri\u00e7\u00e3o curta e objetiva do que foi feito.</p> </li> </ul> <p>\ud83d\udca1 Dica: Utilize o AI Docs para gerar mensagens de commit claras e padronizadas a partir das suas altera\u00e7\u00f5es.</p> <p>Lembre-se: Seu commit \u00e9 uma conversa com o futuro. Com voc\u00ea mesmo daqui a 6 meses e com seus colegas que nunca viram esse c\u00f3digo. Uma mensagem amb\u00edgua \u00e9 como dar dire\u00e7\u00f5es sem pontos de refer\u00eancia.</p>"},{"location":"global/git/#exemplos","title":"Exemplos:","text":"<ul> <li> <p>Bons: \u2705</p> <ul> <li> <p><code>feat: melhora do desempenho com o carregamento lento das imagens</code></p> </li> <li> <p><code>feat(auth): implementa autentica\u00e7\u00e3o JWT</code></p> </li> <li> <p><code>fix: corre\u00e7\u00e3o do treinamento do modelo, fazendo o fit na por\u00e7\u00e3o correta do treinamento</code></p> </li> <li> <p><code>chore: inser\u00e7\u00e3o de depend\u00eancia faltando - scikit-learn</code></p> </li> <li> <p><code>docs: atualiza\u00e7\u00e3o do README com instru\u00e7\u00f5es de instala\u00e7\u00e3o</code></p> </li> <li> <p><code>fix(api): corrige erro no endpoint de usu\u00e1rios</code></p> </li> <li> <p><code>style: aplica\u00e7\u00e3o de formatador de c\u00f3digo black</code></p> </li> </ul> </li> <li> <p>Ruins (Exemplos reais): \u274c</p> <ul> <li> <p><code>add api deploy</code></p> </li> <li> <p><code>Mudan\u00e7a nos modelos e inser\u00e7\u00e3o documenta\u00e7\u00e3o</code></p> </li> <li> <p><code>improve notebook</code></p> </li> <li> <p><code>Documentacao tecninca do projeto</code></p> </li> <li> <p><code>quickfixes</code></p> </li> <li> <p><code>ajustando</code></p> </li> <li> <p><code>fix_trial</code></p> </li> </ul> </li> </ul>"},{"location":"global/git/#trabalhando-com-branches","title":"Trabalhando com Branches","text":"<p>Nossa estrutura de branches \u00e9 desenhada para garantir estabilidade e organiza\u00e7\u00e3o.</p>"},{"location":"global/git/#nomenclatura-padrao","title":"Nomenclatura Padr\u00e3o","text":"<p>Utilizamos os seguintes prefixos para nomear as branches:</p> <ul> <li> <p><code>feature/&lt;nome-da-tarefa&gt;</code>: Para novas funcionalidades.</p> </li> <li> <p><code>fix/&lt;nome-da-tarefa&gt;</code>: Para corre\u00e7\u00e3o de bugs.</p> </li> </ul> <p>O nome deve ser claro, conciso e, se poss\u00edvel, relacionado \u00e0 tarefa no ClickUp (ex: <code>feature/jwt-auth-api</code>).</p>"},{"location":"global/git/#papel-das-branchs-principais","title":"Papel das Branchs principais","text":"<p>Todo reposit\u00f3rio ter\u00e1, por padr\u00e3o, as seguintes branches principais:</p> <ul> <li> <p><code>main</code>: \u00c9 a nossa branch principal, est\u00e1vel e que reflete o c\u00f3digo em produ\u00e7\u00e3o. Ela \u00e9 protegida e n\u00e3o deve receber commits diretos. Todo c\u00f3digo que chega nela j\u00e1 foi testado e validado, al\u00e9m de chegar somente por meio de PRs da <code>develop</code>.</p> </li> <li> <p><code>develop</code>: \u00c9 a branch de integra\u00e7\u00e3o e desenvolvimento. Todo novo trabalho (features e fixes) deve ser mergeado nela primeiro. Ela representa o estado mais atual do que estar\u00e1 no pr\u00f3ximo lan\u00e7amento.</p> </li> </ul>"},{"location":"global/git/#pull-requests-prs-e-revisao-de-codigo","title":"Pull Requests (PRs) e Revis\u00e3o de C\u00f3digo","text":""},{"location":"global/git/#os-prs","title":"Os PRs","text":"<p>Se os seus commits s\u00e3o a hist\u00f3ria do seu trabalho, o Pull Request (PR) \u00e9 o momento em que voc\u00ea convida outros para lerem, contribu\u00edrem e validarem essa hist\u00f3ria. \u00c9 o cora\u00e7\u00e3o do nosso processo colaborativo, onde a qualidade \u00e9 forjada em conjunto.</p>"},{"location":"global/git/#preparando-o-pr-o-titulo-e-o-template","title":"Preparando o PR: o t\u00edtulo e o template","text":"<p>Antes de chamar os revisores, precisamos arrumar a casa. Um PR bem-estruturado acelera a revis\u00e3o e melhora a comunica\u00e7\u00e3o.</p> <ul> <li> <p>O T\u00edtulo \u00e9 a parte fundamental:</p> <ul> <li>O formato <code>T\u00edtulo descritivo do PR (#ID_DA_TASK_NO_CLICKUP)</code> n\u00e3o \u00e9 burocracia, \u00e9 um GPS. Ele conecta instantaneamente seu c\u00f3digo a uma tarefa no ClickUp, dando contexto a todos sobre o porqu\u00ea daquela altera\u00e7\u00e3o existir.</li> </ul> </li> <li> <p>O Template \u00e9 a hist\u00f3ria:</p> <ul> <li> <p>Pense no template do PR como uma hist\u00f3ria para uma boa conversa. Preench\u00ea-lo corretamente garante que ningu\u00e9m perca tempo tentando adivinhar o que est\u00e1 acontecendo.</p> <ul> <li> <p>Contexto: Descreva o problema ou a necessidade que motivou o seu trabalho.</p> </li> <li> <p>Altera\u00e7\u00f5es Realizadas: Liste de forma clara e objetiva as principais mudan\u00e7as que voc\u00ea implementou.</p> </li> <li> <p>Itens Relacionados: Adicione o link para a tarefa no ClickUp e qualquer outra documenta\u00e7\u00e3o que ajude a entender o cen\u00e1rio completo.</p> </li> </ul> </li> </ul> </li> </ul> <p>O PR deve sempre seguir a estrutura abaixo:</p> <pre><code># T\u00edtulo descritivo do PR (#ID_DA_TASK_NO_CLICKUP)\n\n## Contexto\n\nDescreva o problema ou a necessidade que motivou o seu trabalho.\n\n## Altera\u00e7\u00f5es Realizadas\n\nListe de forma clara e objetiva as principais mudan\u00e7as que voc\u00ea implementou.\n\n## Itens Relacionados\n\nAdicione o link para a tarefa no ClickUp e qualquer outra documenta\u00e7\u00e3o que ajude a entender o cen\u00e1rio completo.\n</code></pre> <p>\u26a0\ufe0f Fique ligado: os PRs deve ser sucintos e focados em uma \u00fanica tarefa, PRs muitos grandes podem ser demorados para serem revisados</p> <p>\ud83d\udcd2 Conte\u00fados extras: The anatomy of a perfect pull request | by Hugo Dias</p>"},{"location":"global/git/#reviews","title":"Reviews","text":"<p>A revis\u00e3o de c\u00f3digo n\u00e3o \u00e9 um teste, \u00e9 um di\u00e1logo. \u00c9 a chance de aprender, ensinar e, principalmente, garantir que estamos entregando o nosso melhor.</p> <p>Para guiar essa conversa, o revisor se baseia em 3 Pilares de Qualidade:</p> <ul> <li> <p>Rastreabilidade: O PR est\u00e1 corretamente conectado a uma tarefa do ClickUp?</p> </li> <li> <p>Prop\u00f3sito: As altera\u00e7\u00f5es cumprem os requisitos (o DoD) da tarefa?</p> </li> <li> <p>Funcionalidade: O c\u00f3digo foi testado? Ele funciona como deveria? (\u26a0\ufe0f Lembre-se: ler \u00e9 diferente de executar!)</p> </li> </ul> <p>\u26a0\ufe0f A Regra de Ouro da Entrega: O trabalho s\u00f3 est\u00e1 verdadeiramente \"conclu\u00eddo\" quando o c\u00f3digo passa por esse processo. Por isso, uma tarefa no ClickUp s\u00f3 pode ser finalizada depois que o PR associado a ela for aprovado e integrado na branch develop.</p> <p>\ud83d\udcd2 Conte\u00fados extras: Code Review</p> <p>Assim que o revisor fizer a revis\u00e3o, teremos tr\u00eas caminhos poss\u00edveis:</p> <ul> <li> <p>PR Aprovado \u2705: O PR pode ser mergeado na branch destino. Avise no Slack sobre a aprova\u00e7\u00e3o e o merge.</p> </li> <li> <p>Altera\u00e7\u00f5es Solicitadas \ud83d\udea7: O revisor solicitou mudan\u00e7as. Verifique os coment\u00e1rios, realize os ajustes e pe\u00e7a uma nova revis\u00e3o. Avise no Slack sobre a solicita\u00e7\u00e3o de altera\u00e7\u00f5es e quaisquer d\u00favidas sobre as mudan\u00e7as.</p> </li> <li> <p>PR Reprovado \u274c: O PR foi reprovado. O revisor deve comunicar claramente o motivo e os pr\u00f3ximos passos.</p> </li> </ul>"},{"location":"global/git/#gitflow-da-cognitivo","title":"GitFlow da Cognitivo","text":"<p>Agora que entendemos as pe\u00e7as, vamos ver como elas se movem juntas. Nosso fluxo de trabalho busca sempre garantir que tenhamos um ritmo que garante agilidade e seguran\u00e7a, al\u00e9m de garantir a previsibilidade das entregas.</p> <ul> <li>Passo 1: O Ponto de Partida (<code>develop</code>)</li> </ul> <p>Tudo come\u00e7a na <code>develop</code>. Pense nela como a nossa oficina principal. Antes de come\u00e7ar a martelar, garanta que voc\u00ea tem a planta mais recente do projeto.</p> <pre><code>git checkout develop\ngit pull\n</code></pre> <ul> <li>Passo 2: Sua Bancada de Trabalho (<code>feature/</code> ou <code>fix/</code>)</li> </ul> <p>Agora, crie seu espa\u00e7o. Sua branch \u00e9 sua bancada de trabalho, isolada e segura para voc\u00ea construir sem interferir no trabalho dos outros.</p> <pre><code>git checkout -b feature/minha-nova-feature\n</code></pre> <ul> <li>Passo 3: A Constru\u00e7\u00e3o (Commits Constantes)</li> </ul> <p>Aqui entra a nossa filosofia: \"commits pequenos e constantes\". Cada commit \u00e9 um tijolo bem assentado na sua constru\u00e7\u00e3o. N\u00e3o espere a parede inteira ficar pronta para registrar o progresso. Isso cria um hist\u00f3rico limpo e facilita a vida de todos.</p> <p>\ud83d\udca1 Dica: Todo fim do dia, fa\u00e7a um commit do que voc\u00ea trabalhou. Isso ajuda a manter o hist\u00f3rico atualizado e reduz a chance de conflitos.</p> <p>Utilize sempre o AI Docs para ajud\u00e1-lo em suas mensagens e commits.</p> <ul> <li>Passo 4: O Convite para a Revis\u00e3o (O PR para <code>develop</code>)</li> </ul> <p>Terminou sua parte? \u00d3timo. Agora \u00e9 hora de chamar o mestre de obras para validar. Seu Pull Request para a <code>develop</code> \u00e9 esse convite. Preencha o template, explique sua obra e chame os revisores.</p> <ul> <li>Passo 5: A Integra\u00e7\u00e3o (merge na <code>develop</code>)</li> </ul> <p>Com o feedback aplicado e o \"ok\" do revisor, seu trabalho se junta ao dos outros na oficina. A <code>develop</code> agora cont\u00e9m a sua contribui\u00e7\u00e3o, pronta para ser testada em conjunto com as outras novidades.</p> <ul> <li>Passo 6: O Lan\u00e7amento (merge na <code>main</code>)</li> </ul> <p>Este \u00e9 o grande momento, gerenciado pelo Tech Lead. Quando um conjunto de funcionalidades na <code>develop</code> est\u00e1 s\u00f3lido e validado, ele \u00e9 promovido para a <code>main</code>. \u00c9 como inaugurar o pr\u00e9dio. O c\u00f3digo agora est\u00e1 em produ\u00e7\u00e3o, servindo aos nossos clientes.</p>"},{"location":"global/git/#checklist-diario","title":"\u2705 Checklist Di\u00e1rio","text":"<p>Lembre-se sempre do checklist cotidiano:</p> <p>Checklist Di\u00e1rio</p> <ul> <li> \ud83d\udcc5 Always sync: <code>git pull origin develop</code></li> <li> \ud83c\udf31 Branch naming: <code>feature/</code> ou <code>fix/</code> + nome descritivo  </li> <li> \ud83d\udcdd Commit format: <code>tipo(escopo): descri\u00e7\u00e3o</code></li> <li> \ud83d\udd04 PR template: Preenchido completamente</li> <li> \ud83d\udc64 ClickUp link: Conectado no PR</li> </ul>"},{"location":"global/git/#boas-praticas-o-jeito-cognitivo-de-usar-git","title":"Boas Pr\u00e1ticas: O Jeito Cognitivo de Usar Git","text":"<p>Agora que voc\u00ea domina o fluxo, vamos falar sobre as pr\u00e1ticas que separam o profissional do amador. Essas n\u00e3o s\u00e3o apenas recomenda\u00e7\u00f5es; s\u00e3o os h\u00e1bitos que tornam o nosso trabalho previs\u00edvel, confi\u00e1vel e, acima de tudo, colaborativo.</p> <p>1. O Ritmo da Constru\u00e7\u00e3o: Commits Pequenos e Constantes</p> <p>Pense nos commits como fotografias do progresso da sua obra. Voc\u00ea n\u00e3o tira uma foto apenas quando a casa est\u00e1 pronta, certo? Cada etapa importante merece ser registrada.</p> <p>Por que isso importa?</p> <ul> <li> <p>Seguran\u00e7a: Voc\u00ea nunca perde mais do que algumas horas de trabalho.</p> </li> <li> <p>Clareza: \u00c9 mais f\u00e1cil entender o que mudou entre duas fotos pr\u00f3ximas.</p> </li> <li> <p>Colabora\u00e7\u00e3o: Conflitos s\u00e3o menores e mais f\u00e1ceis de resolver.</p> </li> </ul> <p>Na pr\u00e1tica:</p> <ul> <li> <p>Terminou uma fun\u00e7\u00e3o? Commit.</p> </li> <li> <p>Corrigiu um bug espec\u00edfico? Commit.</p> </li> <li> <p>Adicionou um teste? Commit.</p> </li> </ul> <p>\ud83d\udca1 Regra de ouro: Se voc\u00ea consegue explicar o commit em uma frase clara, ele tem o tamanho certo.</p> <p>2. Conflitos: Quando Duas Hist\u00f3rias se Encontram</p> <p>Conflitos n\u00e3o s\u00e3o problemas; s\u00e3o conversas entre diferentes linhas de pensamento. Quando o Git n\u00e3o consegue decidir qual vers\u00e3o manter, ele est\u00e1 pedindo para voc\u00ea ser o mediador dessa conversa.</p> <p>O processo de resolu\u00e7\u00e3o:</p> <p>Passo 1: Entenda o cen\u00e1rio</p> <pre><code>git status\n</code></pre> <p>Passo 2: Abra os arquivos em conflito e seja o tradutor - Analise as duas vers\u00f5es - Entenda o que cada desenvolvedor estava tentando fazer - Combine o melhor dos dois mundos (ou escolha a vers\u00e3o mais adequada)</p> <p>Passo 3: Finalize a conversa</p> <pre><code>git add &lt;arquivo-resolvido&gt;\ngit merge --continue\n</code></pre> <p>\u26a0\ufe0f Aten\u00e7\u00e3o: Sempre teste o c\u00f3digo ap\u00f3s resolver conflitos. Duas funcionalidades que funcionam separadamente podem n\u00e3o funcionar juntas.</p> <p>3. O H\u00e1bito da Atualiza\u00e7\u00e3o</p> <p>Come\u00e7ar o dia sincronizado \u00e9 como alinhar os ponteiros do rel\u00f3gio. Evita que voc\u00ea trabalhe em uma vers\u00e3o desatualizada e reduza conflitos desnecess\u00e1rios.</p> <p>Ritual di\u00e1rio:</p> <pre><code>git checkout develop\ngit pull                     # Sincroniza com o servidor\ngit checkout feature/minha-branch\ngit merge develop            # Traz as novidades para sua branch\n</code></pre> <p>\ud83c\udfaf Dica: Fa\u00e7a isso antes de come\u00e7ar a codificar e sempre que voltar de uma pausa longa.</p> <p>Essas pr\u00e1ticas n\u00e3o s\u00e3o burocracias. S\u00e3o os fundamentos que nos permitem trabalhar como uma orquestra, onde cada m\u00fasico sabe exatamente quando e como tocar sua parte.</p>"},{"location":"global/git/#referencia-rapida-comandos-essenciais-do-git","title":"Refer\u00eancia R\u00e1pida: Comandos Essenciais do Git","text":"<p>Esta se\u00e7\u00e3o \u00e9 o seu \"canivete su\u00ed\u00e7o\" para o dia a dia. S\u00e3o os comandos que sustentam nosso fluxo de trabalho e te ajudam a manter o ritmo sem perder o controle.</p> <p>1. Rotina Di\u00e1ria (O B\u00e1sico para o Dia a Dia)</p> <p>Comandos para o ciclo de trabalho principal: criar, salvar e sincronizar.</p> Comando Descri\u00e7\u00e3o <code>git status</code> Mostra o status das suas altera\u00e7\u00f5es: o que foi modificado, o que est\u00e1 pronto para commit e o que n\u00e3o est\u00e1 sendo rastreado. Use antes de qualquer <code>commit</code> para ter certeza do que est\u00e1 enviando. <code>git add .</code> Prepara todas as altera\u00e7\u00f5es nos arquivos modificados para serem inclu\u00eddas no pr\u00f3ximo commit. <code>git add &lt;arquivo&gt;</code> Prepara um arquivo espec\u00edfico para o pr\u00f3ximo commit. Ideal para criar commits pequenos e l\u00f3gicos. <code>git commit -m \"feat: msg\"</code> Cria um \"snapshot\" (uma foto) das suas altera\u00e7\u00f5es preparadas, com uma mensagem sem\u00e2ntica. \u00c9 o Passo 3 do nosso GitFlow. <code>git pull</code> Busca as atualiza\u00e7\u00f5es do reposit\u00f3rio remoto e as mescla na sua branch atual. Use no Passo 1 do nosso GitFlow, na branch <code>develop</code>. <code>git push</code> Envia seus commits locais para o reposit\u00f3rio remoto, tornando-os vis\u00edveis para a equipe. <p>2. Analisando o Passado (Inspecionando o Hist\u00f3rico)</p> <p>Comandos para entender o que j\u00e1 foi feito e o que voc\u00ea est\u00e1 prestes a fazer.</p> Comando Descri\u00e7\u00e3o <code>git log</code> Exibe o hist\u00f3rico de commits da branch, mostrando autor, data e mensagem de cada um. <code>git log --oneline --graph</code> Mostra o hist\u00f3rico de forma compacta e visual, com uma linha por commit e um gr\u00e1fico das ramifica\u00e7\u00f5es (branches). Muito \u00fatil para entender a linha do tempo. <code>git diff</code> Mostra as diferen\u00e7as detalhadas entre o que voc\u00ea modificou e o \u00faltimo commit. Use para revisar suas pr\u00f3prias altera\u00e7\u00f5es antes de um <code>git add</code>. <code>git diff --staged</code> Mostra as diferen\u00e7as do que j\u00e1 foi preparado (<code>staged</code>) com <code>git add</code> em rela\u00e7\u00e3o ao \u00faltimo commit. <p>3. Navegando e Criando (Trabalhando com Branches)</p> <p>Comandos para gerenciar suas linhas de trabalho.</p> Comando Descri\u00e7\u00e3o <code>git branch</code> Lista todas as branches locais e indica em qual voc\u00ea est\u00e1. <code>git checkout &lt;nome-da-branch&gt;</code> Muda para uma branch j\u00e1 existente. <code>git checkout -b feature/nome</code> Cria uma nova branch a partir da atual e j\u00e1 muda para ela. \u00c9 o Passo 2 do nosso GitFlow. <code>git merge develop</code> Traz as atualiza\u00e7\u00f5es da branch <code>develop</code> para a sua branch atual. Essencial para manter seu trabalho sincronizado. <p>4. Corrigindo o Percurso (Desfazendo e Salvando Altera\u00e7\u00f5es)</p> <p>Comandos para situa\u00e7\u00f5es inesperadas. Use com aten\u00e7\u00e3o!</p> Comando Descri\u00e7\u00e3o <code>git stash</code> Guarda suas altera\u00e7\u00f5es n\u00e3o commitadas \"na gaveta\" temporariamente, limpando sua \u00e1rea de trabalho. \u00datil quando voc\u00ea precisa mudar de branch rapidamente sem commitar. <code>git stash pop</code> Traz de volta as \u00faltimas altera\u00e7\u00f5es que voc\u00ea guardou com <code>git stash</code>. <code>git restore &lt;arquivo&gt;</code> \u26a0\ufe0f Cuidado! Descarta as altera\u00e7\u00f5es em um arquivo que ainda n\u00e3o foi preparado (<code>staged</code>), restaurando-o para a vers\u00e3o do \u00faltimo commit. <code>git reset --hard HEAD~1</code> \u2620\ufe0f MUITO CUIDADO! Apaga completamente o \u00faltimo commit local. Use apenas se tiver certeza absoluta e NUNCA se o commit j\u00e1 foi enviado com <code>git push</code>."},{"location":"global/repositories/","title":"Reposit\u00f3rios","text":"<p>Falar sobre:</p> <ul> <li> <p>Import\u00e2ncia do reposit\u00f3rio</p> </li> <li> <p>A melhor forma de utilizar</p> </li> <li> <p>Padr\u00f5es de organiza\u00e7\u00e3o</p> </li> </ul>"}]}